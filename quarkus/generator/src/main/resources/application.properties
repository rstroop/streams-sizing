# Quarkus config
quarkus.ssl.native=true

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.generated-prices.connector=smallrye-kafka
mp.messaging.outgoing.generated-prices.topic=usd-prices
mp.messaging.outgoing.generated-prices.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Configure incoming source of USD prices
mp.messaging.incoming.usd-prices.connector=smallrye-kafka
mp.messaging.incoming.usd-prices.topic=usd-prices
mp.messaging.incoming.usd-prices.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Configure the Kafka source (we read from it)
mp.messaging.incoming.eur-prices.connector=smallrye-kafka
mp.messaging.incoming.eur-prices.topic=eur-prices
mp.messaging.incoming.eur-prices.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Configure docker config
quarkus.container-image.builder=jib
quarkus.kubernetes.deployment-target=kubernetes
quarkus.container-image.build=false
quarkus.container-image.push=false

kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
kafka.security.protocol=SASL_SSL

kafka.sasl.mechanism=OAUTHBEARER
kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
